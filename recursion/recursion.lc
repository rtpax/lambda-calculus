

T := Lxy.x
F := Lxy.y

0 := Lsz.z
S := Lwyx.y(wyx)
# := S`#-1


`Phi := Lpz.z(S(pT))(pT)
P := Ln.n`Phi(Lz.z00)F

- := Lab.bPa
+ := Lab.aSb
* := Lab.a(bS)0
^ := Lab.b(*a)1

Z := Lx.xFT

`do-fact := LN`gen.ZN1(*N(`gen(-N1)`gen))

`fact := Ln.`do-fact`n`do-fact
; with full evaluating right away
; => Zn1(*n(`do-fact(-n1)`do-fact))
; => Zn1(*n(Z(-n1)1(*(-n1)(`do-fact(-(-n1)1)`do-fact))))
; => expand infinitely
; only evaluate ids right away
; => Ln.(LN`gen.ZN1(*N(`gen(-N1)`gen)))n(LN`gen.ZN1(*N(`gen(-N1)`gen)))
; => Ln.(LN`gen.(Lx.x(Lxy.y)(Lxy.x))N(Lsz.sz)((Lab.ba)N(`gen((Lab.b(Ln.n(Lpz.z((Lwyx.y(wyx))(p(Lxy.x)))(p(Lxy.x)))(Lz.z(Lsz.z)(Lsz.z))(Lxy.y))a)NLn.(LN`gen.(Lx.x(Lxy.y)(Lxy.x))N(Lsz.sz)((Lab.ba)N(`gen((Lab.b(Ln.n(Lpz.z((Lwyx.y(wyx))(p(Lxy.x)))(p(Lxy.x)))(Lz.z(Lsz.z)(Lsz.z))(Lxy.y))a)
; => done, but if we evaluate those parts that cannot recurse
; => 

[#,##] := Lz.z(S#)(S`##)

-# := `[#,0]
+# := `[0,#]

+#/# := 

-#/# := 




